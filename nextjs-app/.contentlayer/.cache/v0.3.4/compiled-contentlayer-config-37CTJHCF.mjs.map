{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\nimport path from 'path'\n\nexport const Authors = defineDocumentType(() => ({\n  name: 'Authors',\n  filePathPattern: 'authors/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    avatar: { type: 'string' },\n    occupation: { type: 'string' },\n    company: { type: 'string' },\n    email: { type: 'string' },\n    twitter: { type: 'string' },\n    linkedin: { type: 'string' },\n    github: { type: 'string' },\n    layout: { type: 'string' },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => path.basename(doc._raw.sourceFilePath, path.extname(doc._raw.sourceFilePath))\n    },\n    path: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath,\n    },\n    body: { type: 'json', resolve: (doc) => doc.body },\n  },\n}))\n\nexport const Entry = defineDocumentType(() => ({\n  name: 'Entry',\n  filePathPattern: 'entries/**/*.{md,mdx}',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\n    entryType: { \n      type: 'enum', \n      options: ['note', 'journal', 'document'],\n      required: true,\n      default: 'document'\n    },\n    draft: { type: 'boolean' },\n    summary: { type: 'string' },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => path.basename(doc._raw.sourceFilePath, path.extname(doc._raw.sourceFilePath))\n    },\n    path: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath,\n    },\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Entry, Authors],\n  mdx: {\n    remarkPlugins: [],\n    rehypePlugins: [],\n  },\n  disableImportAliasWarning: true,\n  onSuccess: async (importData) => {\n    console.log('Content updated successfully')\n  },\n})\n"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,UAAU;AAEV,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,YAAY,EAAE,MAAM,SAAS;AAAA,IAC7B,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,OAAO,EAAE,MAAM,SAAS;AAAA,IACxB,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,UAAU,EAAE,MAAM,SAAS;AAAA,IAC3B,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,QAAQ,EAAE,MAAM,SAAS;AAAA,EAC3B;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,gBAAgB,KAAK,QAAQ,IAAI,KAAK,cAAc,CAAC;AAAA,IAChG;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,IAC7B;AAAA,IACA,MAAM,EAAE,MAAM,QAAQ,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EACnD;AACF,EAAE;AAEK,IAAM,QAAQ,mBAAmB,OAAO;AAAA,EAC7C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,SAAS,CAAC,EAAE;AAAA,IAC1D,WAAW;AAAA,MACT,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,WAAW,UAAU;AAAA,MACvC,UAAU;AAAA,MACV,SAAS;AAAA,IACX;AAAA,IACA,OAAO,EAAE,MAAM,UAAU;AAAA,IACzB,SAAS,EAAE,MAAM,SAAS;AAAA,EAC5B;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,gBAAgB,KAAK,QAAQ,IAAI,KAAK,cAAc,CAAC;AAAA,IAChG;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,IAC7B;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,OAAO,OAAO;AAAA,EAC9B,KAAK;AAAA,IACH,eAAe,CAAC;AAAA,IAChB,eAAe,CAAC;AAAA,EAClB;AAAA,EACA,2BAA2B;AAAA,EAC3B,WAAW,OAAO,eAAe;AAC/B,YAAQ,IAAI,8BAA8B;AAAA,EAC5C;AACF,CAAC;",
  "names": []
}
